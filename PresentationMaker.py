import logging
import streamlit as st
from pptx import Presentation
from pptx.util import Inches
from io import BytesIO
import matplotlib.pyplot as plt
import plotly.express as px
from langchain.llms import HuggingFaceEndpoint
import torch
import os
from PIL import Image

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Set up Hugging Face API token
HUGGINGFACE_API_TOKEN = ""  # Replace with your Hugging Face API Token

# Force PyTorch to use CPU
device = torch.device("cpu")

# Set up Streamlit page configuration
st.set_page_config(page_title="LLM-Powered Presentation Generator", page_icon="ðŸ“Š")
st.header("Automatic LLM-Powered Presentation Generator ðŸ“Š")

# Sidebar for user input
with st.sidebar:
    st.title("Create Your Presentation")
    topic = st.text_input("Enter the Topic of your Presentation:")

    # Option to generate charts for the presentation
    generate_charts = st.checkbox("Generate Pie Chart for Content")
    bar_chart = st.checkbox("Generate Bar Chart for Content")

    # Load templates and display them as options
    templates_folder = "templates/"
    templates = [f for f in os.listdir(templates_folder) if f.endswith('.pptx')]
    template_names = [t.replace('.pptx', '') for t in templates]
    
    # Display template preview images
    selected_template_name = st.radio("Select a Template", template_names)

    # Show the selected template's preview image
    preview_image_path = os.path.join(templates_folder, f"{selected_template_name}_preview.png")
    try:
        img = Image.open(preview_image_path)
        st.image(img, caption=f"Preview of {selected_template_name}", use_column_width=True)
    except Exception as e:
        st.warning("No preview available for the selected template.")

# Load the LLM for Presentation Generation
llm = HuggingFaceEndpoint(
    repo_id="mistralai/Mistral-Nemo-Instruct-2407",
    max_new_tokens=512,
    top_k=10,
    top_p=0.95,
    typical_p=0.95,
    temperature=0.01,
    repetition_penalty=1.03,
    huggingfacehub_api_token=HUGGINGFACE_API_TOKEN
)

# Function to generate presentation content using the Hugging Face model
def generate_presentation_content(topic, progress_bar):
    """Generates presentation content using the Hugging Face LLM."""
    try:
        progress_bar.progress(30)
        prompt = f"""
        Create a PowerPoint presentation on the topic of: {topic}. 
        The presentation should include the following sections:
        Introduction: Brief overview or background of the topic.
        Main Points: Key ideas or arguments related to the topic.
        Supporting Evidence or Examples: Data, case studies, or relevant details that support the main points.
        Conclusion: A summary of the key takeaways or a call to action.
        Feel free to adjust the content to make it relevant to the topic. 
        Add visuals, charts, or graphs where appropriate to enhance understanding."""
        
        response = llm.invoke(prompt)
        progress_bar.progress(100)
        
        return response
    except Exception as e:
        logger.error(f"Error while generating content: {e}")
        return "Error generating content."

# Function to safely get a placeholder from a slide at a given index
def get_placeholder(slide, index):
    """Safely get the placeholder at a specific index in the slide."""
    try:
        placeholder = slide.placeholders[index]
        return placeholder
    except (KeyError, IndexError) as e:
        logger.warning(f"Placeholder index {index} not found. Error: {e}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error accessing placeholder index {index}: {e}")
        return None

# Function to create PowerPoint presentation from selected template
def create_presentation_from_template(content, topic, template_file, progress_bar):
    """Creates a PowerPoint presentation from the selected template."""
    prs = Presentation(template_file)
    
    # Title Slide
    slide = prs.slides[0]
    title = slide.shapes.title or get_placeholder(slide, 0)
    
    if title:
        title.text = topic
    else:
        logger.warning("No title placeholder found in the first slide of the template.")

    subtitle = get_placeholder(slide, 1)
    if subtitle:
        subtitle.text = "Generated by LLM"
    else:
        logger.warning("No subtitle placeholder found in the first slide of the template.")

    # Content Slide
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    body = get_placeholder(slide, 1)

    if title:
        title.text = f"Content: {topic}"
    
    if body and body.text_frame:
        body.text_frame.clear()
        p = body.text_frame.add_paragraph()
        p.text = content
    else:
        logger.warning("No content placeholder found in the second slide of the template.")

    progress_bar.progress(50)
    return prs

# Function to generate and add charts to the presentation
def generate_charts_to_presentation(prs, progress_bar):

    chart_slide_layout_index = 5  # The desired layout index for the chart slides
    
    # Check if the specified slide layout index is available
    if chart_slide_layout_index >= len(prs.slide_layouts):
        logger.warning(f"Slide layout index {chart_slide_layout_index} is out of range. Using the default layout (0) instead.")
        chart_slide_layout_index = 0  # Fallback to a default layout if the desired layout is unavailable

    
    """Generates charts and adds them to the presentation."""
    if generate_charts:
        fig, ax = plt.subplots(figsize=(5, 3))
        labels = ['Part A', 'Part B', 'Part C', 'Part D']
        sizes = [15, 30, 45, 10]
        ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
        ax.axis('equal')
        
        chart_path = "chart.png"
        plt.savefig(chart_path)
        plt.close()

        slide_layout = prs.slide_layouts[chart_slide_layout_index]
        slide = prs.slides.add_slide(slide_layout)
        slide.shapes.title.text = "Generated Pie Chart"
        slide.shapes.add_picture(chart_path, Inches(1), Inches(1), width=Inches(8.5), height=Inches(4.5))

        progress_bar.progress(75)

    if bar_chart:
        fig = px.bar(
            x=['Category A', 'Category B', 'Category C', 'Category D'],
            y=[10, 20, 30, 40],
            title="Sample Bar Chart"
        )
        chart_path = "bar_chart.html"
        fig.write_html(chart_path)

        slide_layout = prs.slide_layouts[chart_slide_layout_index]
        slide = prs.slides.add_slide(slide_layout)
        slide.shapes.title.text = "Generated Bar Chart"
        slide.shapes.add_picture(chart_path, Inches(1), Inches(1), width=Inches(8.5), height=Inches(4.5))

        progress_bar.progress(90)

    return prs

# Generate content when a topic is provided
if topic and selected_template_name:
    progress_bar = st.progress(0)
    
    st.subheader(f"Generated Content for '{topic}'")
    with st.spinner("Generating content for the presentation..."):
        content = generate_presentation_content(topic, progress_bar)
        st.markdown(content)

    template_file_path = os.path.join(templates_folder, f"{selected_template_name}.pptx")
    
    prs = create_presentation_from_template(content, topic, template_file_path, progress_bar)
    prs = generate_charts_to_presentation(prs, progress_bar)

    output_file = BytesIO()
    prs.save(output_file)
    output_file.seek(0)

    progress_bar.progress(100)

    st.download_button(
        "Download PowerPoint Presentation",
        data=output_file,
        file_name="generated_presentation.pptx",
        mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
    )

else:
    st.info("Please enter a topic and select a template to generate the presentation.")
