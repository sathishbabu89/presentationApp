import streamlit as st
from io import BytesIO
import logging
from pptx import Presentation
from langchain.llms import HuggingFaceEndpoint

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Hugging Face API token (to be replaced with your own)
HUGGINGFACE_API_TOKEN = ""  # Replace with your Hugging Face API Token

# Streamlit app configuration
st.set_page_config(page_title="LLM-Powered Presentation Generator", page_icon="ðŸ“Š")
st.header("Simple LLM-Powered Presentation Generator ðŸ“Š")

# Sidebar for user input
with st.sidebar:
    st.title("Create Your Presentation")
    topic = st.text_input("Enter the Topic of your Presentation:")
    presentation_type = st.selectbox("Select Presentation Type:", ["Basic", "Detailed"])

# Load the LLM for Presentation Generation
llm = HuggingFaceEndpoint(
    repo_id="meta-llama/Meta-Llama-3-8B-Instruct",
    max_new_tokens=512,
    top_k=10,
    top_p=0.95,
    typical_p=0.95,
    temperature=0.01,
    repetition_penalty=1.03,
    huggingfacehub_api_token=HUGGINGFACE_API_TOKEN
)

# Function to generate presentation content
def generate_presentation_content(topic, presentation_type):
    """Generates a basic or detailed presentation content as text."""
    num_of_slides = 3 if presentation_type == "Basic" else 5
    try:
        prompt = f"Create a {num_of_slides}-slide PowerPoint presentation on the topic of '{topic}'"
        response = llm.invoke(prompt)
        return response
    except Exception as e:
        logger.error(f"Error generating content: {e}")
        return "Error generating content."

# Function to create a simple PowerPoint presentation with generated content
def create_presentation(content, topic):
    """Creates a PowerPoint presentation from generated text content."""
    prs = Presentation()
    title_slide_layout = prs.slide_layouts[0]  # Title slide layout
    content_slide_layout = prs.slide_layouts[1]  # Content slide layout

    # Title Slide
    title_slide = prs.slides.add_slide(title_slide_layout)
    title_slide.shapes.title.text = topic
    title_slide.placeholders[1].text = "Generated by LLM"

    # Content Slides
    slides = content.split('\n\n')  # Assuming content is separated by double newlines
    for i, slide_content in enumerate(slides):
        slide = prs.slides.add_slide(content_slide_layout)
        slide.shapes.title.text = f"Slide {i + 1}"
        slide.placeholders[1].text = slide_content

    return prs

# Generate button
if st.button("Generate"):
    if topic:
        with st.spinner("Generating presentation content..."):
            # Generate presentation content
            content = generate_presentation_content(topic, presentation_type)
            st.markdown(content)

            # Create a PowerPoint presentation from the generated content
            prs = create_presentation(content, topic)

            # Save presentation to BytesIO for download
            output_file = BytesIO()
            prs.save(output_file)
            output_file.seek(0)

            # Provide download button
            st.download_button(
                "Download Presentation",
                data=output_file,
                file_name="generated_presentation.pptx",
                mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
            )
    else:
        st.warning("Please enter a topic to generate the presentation.")
